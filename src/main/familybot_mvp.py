#!/usr/bin/env python3
import logging
import os
import json
import random
from datetime import time
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
    JobQueue
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –∏–∑ wishes.json
def load_wishes():
    with open("../../wishes.json", "r", encoding="utf-8") as f:
        return json.load(f)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è
async def send_daily_wish(context: ContextTypes.DEFAULT_TYPE):
    wishes = load_wishes()
    wish = random.choice(wishes)
    chat_id = CHAT_ID
    if not chat_id:
        logger.warning("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    await context.bot.send_message(chat_id=chat_id, text=f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{wish}")


# –û–±—ã—á–Ω—ã–π echo –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
async def echo_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    entities = update.message.entities or []
    bot_mentioned = any(
        e.type == "mention"
        and update.message.text[e.offset:e.offset + e.length] == f"@{context.bot.username}"
        for e in entities
    )

    if bot_mentioned:
        user = update.message.from_user
        reply_text = f"@{user.username or user.first_name}, —Ç—ã –Ω–∞–ø–∏—Å–∞–ª:\n\n{update.message.text}"

        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name} (@{user.username}): {update.message.text}"
        )
        logger.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {reply_text}")

        await update.message.reply_text(reply_text)


# –ö–æ–º–∞–Ω–¥–∞ /getchatid
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode="Markdown")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª chat_id: {chat_id}")


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_mention))
    app.add_handler(CommandHandler("getchatid", get_chat_id))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ 09:00 –ø–æ –ú–æ—Å–∫–≤–µ
    job_queue: JobQueue = app.job_queue
    job_queue.run_daily(
        send_daily_wish,
        time=time(hour=9, minute=0, tzinfo=ZoneInfo("Europe/Moscow"))
    )

    # ‚ö° –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–¥–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    job_queue.run_once(send_daily_wish, when=10)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤ –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º...")
    app.run_polling()


if __name__ == "__main__":
    main()
